// Tokens
SEMICOLON: ";"
COMMA: /,/
COLON: /:/
OPEN_KEY: /{/
CLOSE_KEY: /}/
ASSIGN: /=/
GREATER_THAN: />/
LESS_THAN: /</
NOT_EQUAL: /<>/
OPEN_PARENTHESIS: /\(/
CLOSE_PARENTHESIS: /\)/
PLUS: /\+/
MINUS: /-/
PRODUCT: /\*/
DIVISION: /\//
ID: /[a-zA-Z_][a-zA-Z0-9_]*/
// Reserved words
IF: "if"
ELSE: "else"
INT: "int"
FLOAT: "float"
PROGRAM: "program"
VAR: "var"
PRINT: "print"
CTE_STRING: "cte_string"
CTE_OR: "cte_or"
CTE_ARROW_UP: "cte_arrow_up"
// Ignore words
NEW_LINE: /\n+/
WHITESPACE: (" " | /\t/ )+
%ignore WHITESPACE
%ignore NEW_LINE

// Rules
start: programa

programa: PROGRAM ID SEMICOLON programa1

programa1: vars bloque | bloque

vars: VAR vars1

vars1: type_def | type_def vars1

type_def: ID id_list COLON tipo SEMICOLON

id_list: COMMA ID id_list |

tipo: INT | FLOAT

bloque: OPEN_KEY bloque1 CLOSE_KEY

bloque1: estatuto bloque1 |

estatuto: asignacion | condicion | escritura

asignacion: ID ASSIGN expresion SEMICOLON

expresion: exp expresion1

expresion1: list_comp exp |

list_comp: LESS_THAN | GREATER_THAN | NOT_EQUAL

escritura: PRINT OPEN_PARENTHESIS print_arg escritura1 CLOSE_PARENTHESIS SEMICOLON

escritura1: COMMA print_arg escritura1 |

print_arg: expresion | CTE_STRING

condicion: IF OPEN_PARENTHESIS expresion CLOSE_PARENTHESIS bloque condicion1 SEMICOLON

condicion1: ELSE bloque |

exp: termino exp1

exp1: exp2 exp1 |

exp2: PLUS termino | MINUS termino

termino: factor termino1

termino1: termino2 factor termino1 |

termino2: PRODUCT | DIVISION

factor: var_cte | OPEN_PARENTHESIS expresion CLOSE_PARENTHESIS | factor1 var_cte

factor1: PLUS | MINUS

var_cte: CTE_OR | ID | CTE_ARROW_UP