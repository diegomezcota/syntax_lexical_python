
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CLOSE_KEY CLOSE_PARENTHESIS COLON COMMA DIVISION ELSE FLOAT FLOAT_VALUE GREATER_THAN ID IF INT INT_VALUE LESS_THAN MINUS NOT_EQUAL OPEN_KEY OPEN_PARENTHESIS PLUS PRINT PRODUCT PROGRAM SEMICOLON STRING_VALUE VARprograma : PROGRAM ID SEMICOLON programa1programa1    : vars bloque\n                    | bloquevars   : VAR vars1vars1    : type_def\n                | type_def vars1type_def : ID id_list COLON tipo SEMICOLONid_list  : empty\n                | COMMA ID id_listtipo : INT\n            | FLOATbloque   : OPEN_KEY bloque1 CLOSE_KEYbloque1  : empty\n                | estatuto bloque1estatuto : asignacion\n                | condicion\n                | escrituraasignacion   : ID ASSIGN expresion SEMICOLONexpresion    : exp expresion1expresion1   : list_comp exp\n                    | emptylist_comp    : LESS_THAN\n                    | GREATER_THAN\n                    | NOT_EQUALescritura    : PRINT OPEN_PARENTHESIS print_arg escritura1 CLOSE_PARENTHESIS SEMICOLONescritura1   : COMMA print_arg escritura1\n                    | emptyprint_arg    : expresion\n                    | STRING_VALUEcondicion    : IF OPEN_PARENTHESIS expresion CLOSE_PARENTHESIS bloque condicion1 SEMICOLONcondicion1   : ELSE bloque\n                    | emptyexp  : termino exp1exp1 : exp2 exp1\n            | emptyexp2 : PLUS termino\n            | MINUS terminotermino  : factor termino1termino1 : termino2 factor termino1\n                | emptytermino2 : PRODUCT\n                | DIVISIONfactor   : var_cte\n                | OPEN_PARENTHESIS expresion CLOSE_PARENTHESIS\n                | factor1 var_ctefactor1  : PLUS\n                | MINUSvar_cte  : FLOAT_VALUE\n                | ID\n                | INT_VALUEempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,10,27,],[0,-1,-3,-2,-12,]),'ID':([2,8,9,12,16,17,18,19,26,29,30,31,40,41,44,45,54,56,58,59,60,64,65,67,69,70,75,77,91,93,],[3,13,20,13,20,-15,-16,-17,33,34,34,34,34,34,-46,-47,-18,34,-22,-23,-24,34,34,34,-41,-42,34,-7,-25,-30,]),'SEMICOLON':([3,27,34,35,36,37,38,39,42,43,50,51,52,55,57,61,62,63,66,68,72,78,79,80,81,82,83,84,85,87,88,90,94,],[4,-12,-49,54,-51,-51,-51,-43,-48,-50,77,-10,-11,-19,-21,-33,-51,-35,-38,-40,-45,-20,-34,-36,-37,-51,-44,-51,91,-39,93,-32,-31,]),'VAR':([4,],[8,]),'OPEN_KEY':([4,6,11,12,23,73,77,89,],[9,9,-4,-5,-6,9,-7,9,]),'CLOSE_KEY':([9,14,15,16,17,18,19,28,54,91,93,],[-51,27,-13,-51,-15,-16,-17,-14,-18,-25,-30,]),'IF':([9,16,17,18,19,54,91,93,],[21,21,-15,-16,-17,-18,-25,-30,]),'PRINT':([9,16,17,18,19,54,91,93,],[22,22,-15,-16,-17,-18,-25,-30,]),'COMMA':([13,33,34,36,37,38,39,42,43,47,48,49,55,57,61,62,63,66,68,72,78,79,80,81,82,83,86,87,],[26,26,-49,-51,-51,-51,-43,-48,-50,75,-28,-29,-19,-21,-33,-51,-35,-38,-40,-45,-20,-34,-36,-37,-51,-44,75,-39,]),'COLON':([13,24,25,33,53,],[-51,32,-8,-51,-9,]),'ASSIGN':([20,],[29,]),'OPEN_PARENTHESIS':([21,22,29,30,31,40,56,58,59,60,64,65,67,69,70,75,],[30,31,40,40,40,40,40,-22,-23,-24,40,40,40,-41,-42,40,]),'ELSE':([27,84,],[-12,89,]),'FLOAT_VALUE':([29,30,31,40,41,44,45,56,58,59,60,64,65,67,69,70,75,],[42,42,42,42,42,-46,-47,42,-22,-23,-24,42,42,42,-41,-42,42,]),'INT_VALUE':([29,30,31,40,41,44,45,56,58,59,60,64,65,67,69,70,75,],[43,43,43,43,43,-46,-47,43,-22,-23,-24,43,43,43,-41,-42,43,]),'PLUS':([29,30,31,34,37,38,39,40,42,43,56,58,59,60,62,64,65,66,67,68,69,70,72,75,80,81,82,83,87,],[44,44,44,-49,64,-51,-43,44,-48,-50,44,-22,-23,-24,64,44,44,-38,44,-40,-41,-42,-45,44,-36,-37,-51,-44,-39,]),'MINUS':([29,30,31,34,37,38,39,40,42,43,56,58,59,60,62,64,65,66,67,68,69,70,72,75,80,81,82,83,87,],[45,45,45,-49,65,-51,-43,45,-48,-50,45,-22,-23,-24,65,45,45,-38,45,-40,-41,-42,-45,45,-36,-37,-51,-44,-39,]),'STRING_VALUE':([31,75,],[49,49,]),'INT':([32,],[51,]),'FLOAT':([32,],[52,]),'PRODUCT':([34,38,39,42,43,72,82,83,],[-49,69,-43,-48,-50,-45,69,-44,]),'DIVISION':([34,38,39,42,43,72,82,83,],[-49,70,-43,-48,-50,-45,70,-44,]),'LESS_THAN':([34,36,37,38,39,42,43,61,62,63,66,68,72,79,80,81,82,83,87,],[-49,58,-51,-51,-43,-48,-50,-33,-51,-35,-38,-40,-45,-34,-36,-37,-51,-44,-39,]),'GREATER_THAN':([34,36,37,38,39,42,43,61,62,63,66,68,72,79,80,81,82,83,87,],[-49,59,-51,-51,-43,-48,-50,-33,-51,-35,-38,-40,-45,-34,-36,-37,-51,-44,-39,]),'NOT_EQUAL':([34,36,37,38,39,42,43,61,62,63,66,68,72,79,80,81,82,83,87,],[-49,60,-51,-51,-43,-48,-50,-33,-51,-35,-38,-40,-45,-34,-36,-37,-51,-44,-39,]),'CLOSE_PARENTHESIS':([34,36,37,38,39,42,43,46,47,48,49,55,57,61,62,63,66,68,71,72,74,76,78,79,80,81,82,83,86,87,92,],[-49,-51,-51,-51,-43,-48,-50,73,-51,-28,-29,-19,-21,-33,-51,-35,-38,-40,83,-45,85,-27,-20,-34,-36,-37,-51,-44,-51,-39,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programa1':([4,],[5,]),'vars':([4,],[6,]),'bloque':([4,6,73,89,],[7,10,84,94,]),'vars1':([8,12,],[11,23,]),'type_def':([8,12,],[12,12,]),'bloque1':([9,16,],[14,28,]),'empty':([9,13,16,33,36,37,38,47,62,82,84,86,],[15,25,15,25,57,63,68,76,63,68,90,76,]),'estatuto':([9,16,],[16,16,]),'asignacion':([9,16,],[17,17,]),'condicion':([9,16,],[18,18,]),'escritura':([9,16,],[19,19,]),'id_list':([13,33,],[24,53,]),'expresion':([29,30,31,40,75,],[35,46,48,71,48,]),'exp':([29,30,31,40,56,75,],[36,36,36,36,78,36,]),'termino':([29,30,31,40,56,64,65,75,],[37,37,37,37,37,80,81,37,]),'factor':([29,30,31,40,56,64,65,67,75,],[38,38,38,38,38,38,38,82,38,]),'var_cte':([29,30,31,40,41,56,64,65,67,75,],[39,39,39,39,72,39,39,39,39,39,]),'factor1':([29,30,31,40,56,64,65,67,75,],[41,41,41,41,41,41,41,41,41,]),'print_arg':([31,75,],[47,86,]),'tipo':([32,],[50,]),'expresion1':([36,],[55,]),'list_comp':([36,],[56,]),'exp1':([37,62,],[61,79,]),'exp2':([37,62,],[62,62,]),'termino1':([38,82,],[66,87,]),'termino2':([38,82,],[67,67,]),'escritura1':([47,86,],[74,92,]),'condicion1':([84,],[88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON programa1','programa',4,'p_programa','parser.py',8),
  ('programa1 -> vars bloque','programa1',2,'p_programa1','parser.py',13),
  ('programa1 -> bloque','programa1',1,'p_programa1','parser.py',14),
  ('vars -> VAR vars1','vars',2,'p_vars','parser.py',19),
  ('vars1 -> type_def','vars1',1,'p_vars1','parser.py',24),
  ('vars1 -> type_def vars1','vars1',2,'p_vars1','parser.py',25),
  ('type_def -> ID id_list COLON tipo SEMICOLON','type_def',5,'p_type_def','parser.py',29),
  ('id_list -> empty','id_list',1,'p_id_list','parser.py',34),
  ('id_list -> COMMA ID id_list','id_list',3,'p_id_list','parser.py',35),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',40),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',41),
  ('bloque -> OPEN_KEY bloque1 CLOSE_KEY','bloque',3,'p_bloque','parser.py',46),
  ('bloque1 -> empty','bloque1',1,'p_bloque1','parser.py',51),
  ('bloque1 -> estatuto bloque1','bloque1',2,'p_bloque1','parser.py',52),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','parser.py',57),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser.py',58),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','parser.py',59),
  ('asignacion -> ID ASSIGN expresion SEMICOLON','asignacion',4,'p_asignacion','parser.py',63),
  ('expresion -> exp expresion1','expresion',2,'p_expresion','parser.py',67),
  ('expresion1 -> list_comp exp','expresion1',2,'p_expresion1','parser.py',71),
  ('expresion1 -> empty','expresion1',1,'p_expresion1','parser.py',72),
  ('list_comp -> LESS_THAN','list_comp',1,'p_list_comp','parser.py',76),
  ('list_comp -> GREATER_THAN','list_comp',1,'p_list_comp','parser.py',77),
  ('list_comp -> NOT_EQUAL','list_comp',1,'p_list_comp','parser.py',78),
  ('escritura -> PRINT OPEN_PARENTHESIS print_arg escritura1 CLOSE_PARENTHESIS SEMICOLON','escritura',6,'p_escritura','parser.py',82),
  ('escritura1 -> COMMA print_arg escritura1','escritura1',3,'p_escritura1','parser.py',86),
  ('escritura1 -> empty','escritura1',1,'p_escritura1','parser.py',87),
  ('print_arg -> expresion','print_arg',1,'p_print_arg','parser.py',91),
  ('print_arg -> STRING_VALUE','print_arg',1,'p_print_arg','parser.py',92),
  ('condicion -> IF OPEN_PARENTHESIS expresion CLOSE_PARENTHESIS bloque condicion1 SEMICOLON','condicion',7,'p_condicion','parser.py',96),
  ('condicion1 -> ELSE bloque','condicion1',2,'p_condicion1','parser.py',100),
  ('condicion1 -> empty','condicion1',1,'p_condicion1','parser.py',101),
  ('exp -> termino exp1','exp',2,'p_exp','parser.py',105),
  ('exp1 -> exp2 exp1','exp1',2,'p_exp1','parser.py',109),
  ('exp1 -> empty','exp1',1,'p_exp1','parser.py',110),
  ('exp2 -> PLUS termino','exp2',2,'p_exp2','parser.py',114),
  ('exp2 -> MINUS termino','exp2',2,'p_exp2','parser.py',115),
  ('termino -> factor termino1','termino',2,'p_termino','parser.py',119),
  ('termino1 -> termino2 factor termino1','termino1',3,'p_termino1','parser.py',123),
  ('termino1 -> empty','termino1',1,'p_termino1','parser.py',124),
  ('termino2 -> PRODUCT','termino2',1,'p_termino2','parser.py',128),
  ('termino2 -> DIVISION','termino2',1,'p_termino2','parser.py',129),
  ('factor -> var_cte','factor',1,'p_factor','parser.py',133),
  ('factor -> OPEN_PARENTHESIS expresion CLOSE_PARENTHESIS','factor',3,'p_factor','parser.py',134),
  ('factor -> factor1 var_cte','factor',2,'p_factor','parser.py',135),
  ('factor1 -> PLUS','factor1',1,'p_factor1','parser.py',139),
  ('factor1 -> MINUS','factor1',1,'p_factor1','parser.py',140),
  ('var_cte -> FLOAT_VALUE','var_cte',1,'p_var_cte','parser.py',144),
  ('var_cte -> ID','var_cte',1,'p_var_cte','parser.py',145),
  ('var_cte -> INT_VALUE','var_cte',1,'p_var_cte','parser.py',146),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',150),
]
